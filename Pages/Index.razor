@page "/"

@using System.Security.Claims;
@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.AspNetCore.Components.Authorization

@inject NavigationManager navigationManager

<h1>Hello, world!</h1>

<div class="container">
    <div class="row">
        <p class="fs-3">@Properties.Resources.AboutSite</p>
        <p>@Properties.Resources.SiteDescription</p>
    </div>
    <div class="row">
        <p class="fs-3">@Properties.Resources.HowToUseThisSite</p>
        <ul class="list-group list-group-numbered list-group-flush col-auto">
            <li class="list-group-item">@Properties.Resources.LoginWithDiscord</li>
            <li class="list-group-item">@Properties.Resources.SignUpSubscription</li>
            <li class="list-group-item">@Properties.Resources.AddBotDiscord</li>
        </ul>
    </div>
    <AuthorizeView>
        <Authorized>
            @switch (CurrentSubscriptionState)
            {
                case SubscriptionState.Enable:
                    <EditForm Model="@ModelData" Context="authorize">
                        <div class="row align-items-center">
                            <div class="col-6">
                                <img src="svg/translate.svg" />
                                <label class="col-form-label">@Properties.Resources.Language</label>
                            </div>
                            <InputRadioGroup Name="Language" @bind-Value=@ModelData.SelectedLanguage class="form-check-inline">
                                <div class="col-3">
                                    <InputRadio Name="Language" Value="@Language.English" class="form-check-input" id="english-button" />
                                    <label class="form-check-label" for="english-button">English</label>
                                </div>
                                <div class="col-3">
                                    <InputRadio Name="Language" Value="@Language.Japanese" class="form-check-input" id="japanese-button" />
                                    <label class="form-check-label" for="japanese-button">日本語</label>
                                </div>
                            </InputRadioGroup>
                        </div>
                        <div class="border" />
                        <div class="row align-items-center">
                            <div class="col-6">
                                <img src="svg/image.svg" />
                                <label class="col-form-label">@Properties.Resources.Model</label>
                            </div>
                            <InputSelect Name="ModelType" @bind-Value=ModelData.SelectedModelType class="col-3 dropdown form-check-inline">
                                <option value="@ModelType.Stable" class="dropdown-item">Stable</option>
                                <option value="@ModelType.Stable2" class="dropdown-item">Stable2</option>
                                <option value="@ModelType.Waifu" class="dropdown-item">Waifu</option>
                                <option value="@ModelType.Anything" class="dropdown-item">Anything</option>
                            </InputSelect>
                        </div>
                        <div class="border" />
                    </EditForm>
                    break;
            }

            <div class="row justify-content-center">
                <button class="col-auto mt-4 btn btn-warning" @onclick="OnClickLogoutButton">@Properties.Resources.Logout</button>
            </div>
            
            @switch (CurrentSubscriptionState)
            {
                case SubscriptionState.Disable:
                    <div class="row justify-content-center">
                        <p class="col-auto fs-2 text-center">@Properties.Resources.SubscriptionDisableDescription1<br/>@Properties.Resources.SubscriptionDisableDescription2</p>
                    </div>
                    <div class="row justify-content-center">
                        <button type="submit" class="col-6 mt-4 mb-4 btn btn-danger" @onclick="OnClickSubscribeButton">@Properties.Resources.Subscription</button>
                    </div>
                    break;

                case SubscriptionState.Duplication:
                    <div class="row justify-content-center">
                        <p class="col-auto fs-2 text-center">@Properties.Resources.SubscriptionDuplicationDescription1<br/>@Properties.Resources.SubscriptionDuplicationDescription2</p>
                    </div>
                    <div class="row justify-content-center">
                        <button type="submit" class="col-6 mt-4 btn btn-info" @onclick="OnClickCustomerPortalButton">@Properties.Resources.CustomerPortal</button>
                    </div>
                    break;

                case SubscriptionState.Enable:
                    <div class="row justify-content-center">
                        <p class="col-auto fs-2 text-center">@Properties.Resources.SubscriptionEnableDescription1<br/>@Properties.Resources.SubscriptionEnableDescription2<br/>@Properties.Resources.SubscriptionEnableDescription3</p>
                    </div>
                    <div class="row justify-content-center">
                        <button type="submit" class="col-6 mt-2 mb-4 btn btn-success" @onclick="OnClickAddBotButton">@Properties.Resources.AddBot</button>
                    </div>
                    <div class="row justify-content-center">
                        <button type="submit" class="col-6 mt-4 btn btn-info" @onclick="OnClickCustomerPortalButton">@Properties.Resources.CustomerPortal</button>
                    </div>
                    break;
            }
        </Authorized>
        <NotAuthorized>
            <div class="row justify-content-center h-25">
                <button class="col-auto mt-4 btn btn-primary" @onclick="OnClickLoginButton">
                    <img src="svg/discord-mark-white.svg" class="img-fluid w-25 h-50" />
                    <span class="fs-2 align-middle">@Properties.Resources.Login</span>
                </button>
            </div>
        </NotAuthorized>
    </AuthorizeView>
    <div class="row">
        <p class="fs-3">@Properties.Resources.HowToUseBot</p>
        <ul class="list-group list-group-numbered list-group-flush col-auto">
            <li class="list-group-item">@Properties.Resources.SendDiscordToBot</li>
            <li class="list-group-item">@Properties.Resources.WaitWhileGenerated</li>
            <li class="list-group-item">@Properties.Resources.GeneratedImageFromBot</li>
        </ul>
    </div>
    <div class="row">
        <p class="fs-3">@Properties.Resources.TableDescription</p>
        <table class="table table-striped table-bordered col-auto">
            <thead>
                <tr>
                    <th>@Properties.Resources.TableHeaderModelName</th>
                    <th>@Properties.Resources.TableHeaderFeatures</th>
                    <th>URL</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Stable Diffusion</td>
                    <td>@Properties.Resources.StableDiffusionFeatures</td>
                    <td><a href="https://huggingface.co/CompVis/stable-diffusion-v1-4">https://huggingface.co/CompVis/stable-diffusion-v1-4</a></td>
                </tr>
                <tr>
                    <td>Stable Diffusion 2</td>
                    <td>@Properties.Resources.StableDiffusion2Features</td>
                    <td><a href="https://huggingface.co/stabilityai/stable-diffusion-2-1">https://huggingface.co/stabilityai/stable-diffusion-2-1</a></td>
                </tr>
                <tr>
                    <td>Waifu Diffusion</td>
                    <td>@Properties.Resources.WaifuDiffusionFeatures</td>
                    <td><a href="https://huggingface.co/hakurei/waifu-diffusion">https://huggingface.co/hakurei/waifu-diffusion</a></td>
                </tr>
                <tr>
                    <td>Anything</td>
                    <td>@Properties.Resources.AnythingFeatures</td>
                    <td><a href="https://huggingface.co/Linaqruf/anything-v3.0">https://huggingface.co/Linaqruf/anything-v3.0</a></td>
                </tr>
            </tbody>
        </table>
    </div>
    <div class="row">
        <p class="fs-3">@Properties.Resources.AboutCharges</p>
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>@Properties.Resources.NumberOfImages</th>
                    <th>@Properties.Resources.Charge</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>@Properties.Resources.FreeCount</td>
                    <td>@Properties.Resources.FreePay</td>
                </tr>
                <tr>
                    <td>@Properties.Resources.SubscriptionCount</td>
                    <td>@Properties.Resources.SubscriptionPay</td>
                </tr>
            </tbody>
        </table>
    </div>
    <div class="row">
        <p class="fs-3">Q&A</p>
        <ol class="list-group">
            <li class="list-group-item list-group-item-info">@Properties.Resources.AccessInfomationQuestion</li>
            <li class="list-group-item">@Properties.Resources.AccessInfomationAnswer1<a href="https://github.com/kawa0x0A/StableDiffusionDiscordBot">@Properties.Resources.AccessInfomationAnswer2</a>@Properties.Resources.AccessInfomationAnswer3</li>
            <li class="list-group-item list-group-item-info">@Properties.Resources.WhenBilliedQuestion</li>
            <li class="list-group-item">@Properties.Resources.WhenBilledAnswer</li>
            <li class="list-group-item list-group-item-info">@Properties.Resources.WantToCancelSubscriptionQuestion</li>
            <li class="list-group-item">@Properties.Resources.WantToCancelSubscriptionAnswer</li>
            <li class="list-group-item list-group-item-info">@Properties.Resources.OtherProblemQuestion</li>
            <li class="list-group-item">@Properties.Resources.OtherProblemAnswer1<a href="https://twitter.com/kawa0x0A">@Properties.Resources.OtherProblemAnswer2</a>@Properties.Resources.OtherProblemAnswer3</li>
        </ol>
    </div>
    <div class="row justify-content-center">
        <p class="col-auto">Developed by <a href="https://twitter.com/kawa0x0A">kawa0x0A</a></p>
    </div>
</div>

@code{
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    private enum Language
    {
        English,
        Japanese,
    }

    private enum ModelType
    {
        Stable,
        Stable2,
        Waifu,
        Anything,
    }

    private enum SubscriptionState
    {
        None,
        Disable,
        Duplication,
        Enable,
    }

    private class Model
    {
        public Language SelectedLanguage { get; set; }
        public ModelType SelectedModelType { get; set; }
    }

    private Model ModelData { get; set; } = new Model();

    private SubscriptionState CurrentSubscriptionState { get; set; } = SubscriptionState.None;

    protected override void OnInitialized()
    {
        if (System.Globalization.CultureInfo.CurrentCulture.Name == "ja-JP")
        {
            ModelData.SelectedLanguage = Language.Japanese;
        }
        else
        {
            ModelData.SelectedLanguage = Language.English;
        }

        ModelData.SelectedModelType = ModelType.Stable;

        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationState!;

        if ((authenticationState.User.Identity != null) && (authenticationState.User.Identity.IsAuthenticated))
        {
            var subscriptionService = new Stripe.SubscriptionService();

            var subscriptions = await subscriptionService.SearchAsync(new Stripe.SubscriptionSearchOptions() { Query = $"metadata['DiscordId']:'{authenticationState.User.Claims.Single(claim => claim.Type == ClaimTypes.NameIdentifier).Value}' AND status:'active'" });

            if (subscriptions.Data.Count == 0)
            {
                CurrentSubscriptionState = SubscriptionState.Disable;
            }
            else if (subscriptions.Data.Count > 1)
            {
                CurrentSubscriptionState = SubscriptionState.Duplication;
            }
            else
            {
                CurrentSubscriptionState = SubscriptionState.Enable;
            }
        }
        else
        {
            CurrentSubscriptionState = SubscriptionState.Disable;
        }

        await base.OnInitializedAsync();
    }

    private string GetDiscordBotUrl()
    {
        switch (ModelData.SelectedLanguage)
        {
            case Language.Japanese:
                switch (ModelData.SelectedModelType)
                {
                    case ModelType.Stable:  return "https://discord.com/api/oauth2/authorize?client_id=1054281527590142014&permissions=43008&scope=bot";

                    case ModelType.Stable2: return "https://discord.com/api/oauth2/authorize?client_id=1063030699130626158&permissions=43008&scope=bot";

                    case ModelType.Waifu:   return "https://discord.com/api/oauth2/authorize?client_id=1054663362421727272&permissions=43008&scope=bot";

                    case ModelType.Anything: return "https://discord.com/api/oauth2/authorize?client_id=1063347889318936626&permissions=43008&scope=bot";
                }
                break;

            case Language.English:
                switch (ModelData.SelectedModelType)
                {
                    case ModelType.Stable:  return "https://discord.com/api/oauth2/authorize?client_id=1054662338973802566&permissions=43008&scope=bot";

                    case ModelType.Stable2: return "https://discord.com/api/oauth2/authorize?client_id=1063030808631312434&permissions=43008&scope=bot";

                    case ModelType.Waifu:   return "https://discord.com/api/oauth2/authorize?client_id=1054663743113543710&permissions=43008&scope=bot";

                    case ModelType.Anything: return "https://discord.com/api/oauth2/authorize?client_id=1063348061549625354&permissions=43008&scope=bot";
                }
                break;
        }

        return string.Empty;
    }

    private void OnClickAddBotButton()
    {
        navigationManager.NavigateTo(GetDiscordBotUrl());
    }

    private async void OnClickSubscribeButton()
    {
        var authenticationState = await AuthenticationState!;

        var service = new Stripe.Checkout.SessionService();

        var session = await service.CreateAsync(new Stripe.Checkout.SessionCreateOptions()
        {
            LineItems = new List<Stripe.Checkout.SessionLineItemOptions>()
            {
                new Stripe.Checkout.SessionLineItemOptions()
                {
                    Price = "price_1MPyZJBvThSVxnxA2h87cVXS",
                },
            },
            Mode = "subscription",
            CustomerEmail = authenticationState.User.Claims.Single(claim => claim.Type == ClaimTypes.Email).Value,
            SubscriptionData = new Stripe.Checkout.SessionSubscriptionDataOptions() { Metadata = new Dictionary<string, string>() { { "DiscordId", authenticationState.User.Claims.Single(claim => claim.Type == ClaimTypes.NameIdentifier).Value } } },
            SuccessUrl = navigationManager.BaseUri,
            CancelUrl = navigationManager.BaseUri,
            AutomaticTax = new Stripe.Checkout.SessionAutomaticTaxOptions() { Enabled = true },
        });

        navigationManager.NavigateTo(session.Url);
    }

    private void OnClickLoginButton()
    {
        navigationManager.NavigateTo("login", true);
    }

    private void OnClickLogoutButton()
    {
        navigationManager.NavigateTo("logout", true);
    }

    private void OnClickCustomerPortalButton()
    {
        navigationManager.NavigateTo("https://billing.stripe.com/p/login/8wM6oCenuaTm5nq9AA");
    }
}